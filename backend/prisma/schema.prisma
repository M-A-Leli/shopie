// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id              String     @id @default(uuid())
  username        String     @unique
  email           String     @unique
  password        String
  salt            String
  phone_number    String?    @unique
  is_deleted      Boolean    @default(false)
  created_at      DateTime   @default(now())
  updated_at      DateTime   @updatedAt
  admin           Admin?
  reset_tokens    PasswordResetToken[]
  orders          Order[]
  reviews         Review[]
  @@map("Users")
}

model Admin {
  id             String        @id @default(uuid())
  user_id        String        @unique
  is_deleted     Boolean       @default(false)
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  user           User          @relation(fields: [user_id], references: [id])
  @@map("Admins")
}

model Product {
  id             String        @id @default(uuid())
  name           String
  description    String
  price          Decimal
  stock_quantity Int
  category_id    String
  category       Category      @relation(fields: [category_id], references: [id])
  is_deleted     Boolean       @default(false)
  is_featured    Boolean       @default(false)
  on_offer       Boolean       @default(false)
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  rating         Float         @default(0.0)
  no_of_reviews  Int           @default(0)
  images         ProductImage[]
  reviews        Review[]
  cart_items     CartItem[] 
  @@map("Products")
}

model ProductImage {
  id          String        @id @default(uuid())
  url         String
  product_id  String
  product     Product       @relation(fields: [product_id], references: [id])
  is_deleted  Boolean       @default(false)
  @@map("ProductImages")
}

model Category {
  id          String   @id @default(uuid())
  name        String
  image_url   String
  is_deleted  Boolean       @default(false)
  products    Product[]
  @@map("Categories")
}

model Order {
  id           String      @id @default(uuid())
  user_id      String
  user         User        @relation(fields: [user_id], references: [id])
  cart_items   CartItem[]
  status       String      @default("PENDING")
  total_price  Decimal     @default(0.00)
  is_deleted   Boolean     @default(false)
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
  @@map("Orders")
}

model CartItem {
  id            String      @id @default(uuid())
  quantity      Int         @default(1)
  product_id    String
  product       Product     @relation(fields: [product_id], references: [id])
  order_id      String
  order         Order       @relation(fields: [order_id], references: [id])
  subtotal      Decimal     @default(0.00)
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
  is_deleted    Boolean     @default(false)
  @@map("CartItems")
}

model Review {
  id           String   @id @default(uuid())
  rating       Float
  comment      String
  user_id      String
  user         User      @relation(fields: [user_id], references: [id])
  product_id   String
  product      Product   @relation(fields: [product_id], references: [id])
  createdAt    DateTime  @default(now())
  is_deleted   Boolean   @default(false)
  @@map("Reviews")
}

model PasswordResetToken {
  id          String    @id @default(uuid())
  user_id     String
  user        User      @relation(fields: [user_id], references: [id])
  reset_code  String    
  is_valid    Boolean  @default(true)
  createdAt   DateTime  @default(now())
  expires_at  DateTime
}
